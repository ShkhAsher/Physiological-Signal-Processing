pip install wfdb

import numpy as np
import wfdb

# Read a sample ECG recording from the MIT-BIH Arrhythmia Database
record = wfdb.rdrecord('108', pn_dir='mitdb')

# Display the signal shape
print(record.p_signal.shape)

# Plot the ECG
wfdb.plot_wfdb(record=record, title='MIT-BIH Record 100')

record.sig_name
print(record.p_signal.shape)

display(signal)
display(fields)

#signal, fields = wfdb.rdsamp('100', channels=[0],sampfrom=0, sampto=1000, pn_dir='mitdb')
signal, fields = wfdb.rdsamp('108', channels=[1], pn_dir='mitdb')
signal = signal.flatten()

print(signal.shape)
display(signal)
display(fields)

import scipy.io
scipy.io.savemat('/content/signal.mat', {'signal': signal})

# Demo 5 - Read a WFDB record and annotation. Plot all channels, and the annotation on top of channel 0.
fs=fields['fs']
time = np.arange(len(signal)) / fs
print(fs)

#ann=wfdb.rdann('108','atr',sampfrom=0, sampto=1000, pn_dir='mitdb')
ann=wfdb.rdann('108','atr', pn_dir='mitdb')

print(ann)
scipy.io.savemat('/content/ann.mat', {'ann': ann})

import matplotlib.pyplot as plt
plt.figure(figsize=(12, 4))
plt.plot(time, signal, color='blue')
plt.plot(ann.sample/fs,signal[ann.sample],'ro')
plt.title('Channel 0 - Record 100 (MIT-BIH)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude (mV)')
plt.grid(True)
plt.tight_layout()
plt.show()

from scipy.signal import butter
#b, a = butter(N=2, Wn=0.33, btype='low', analog=False)  # fc=60Hz wn=fc/fs/2
b, a = butter(N=2, Wn=0.22, btype='low', analog=False)  # fc=40Hz wn=fc/fs/2
print(a)

from scipy.signal import iirnotch, filtfilt

fs = 360        # Sampling frequency (MITDB)
f0 = 60          # Frequency to remove
Q = 30           # Quality factor (higher = narrower notch)

# Design notch filter
wo = f0 / (fs/2)         # Normalized frequency
bw = wo / Q              # Bandwidth
[b, a] = iirnotch(wo, bw)

# Apply the filter
filtered = filtfilt(b, a, signal)  # Use filtfilt for zero-phase

# Optional: plot before and after
plt.figure(figsize=(12, 5))
plt.subplot(2, 1, 1)
plt.plot(signal, label='Original Signal')
plt.title('Before Notch Filter')
plt.subplot(2, 1, 2)
plt.plot(filtered, label='Filtered Signal', color='orange')
plt.title('After Notch Filter (60 Hz Removed)')
plt.tight_layout()
plt.show()

from scipy.signal import lfilter

filtered = lfilter(b, a, signal)

plt.figure(figsize=(12, 4))
plt.plot(time, filtered, color='blue')
plt.plot(ann.sample/fs,filtered[ann.sample],'ro')
plt.plot(time, signal, color='red')
plt.title('Channel 0 - Record 108 (MIT-BIH)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude (mV)')
plt.xlim(0,50)
plt.grid(True)
plt.tight_layout()
plt.show()

import numpy as np
T = 1 / fs  # Sampling interval
n = len(signal)
fft_vals = np.fft.fft(signal)
fft_vals = np.abs(fft_vals[:n // 2])  # Magnitude only, half-spectrum
freqs = np.fft.fftfreq(n, T)[:n // 2]  # Frequency bins



# Plot positive frequencies only
plt.figure(figsize=(12, 4))
plt.plot(freqs, fft_vals)
plt.title("Frequency Response (FFT of ECG Signal)")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")
plt.xlim(55,65)
plt.ylim(0,1300)
plt.grid(True)
plt.show()

fft_filt = np.fft.fft(filtered)
fft_filt = np.abs(fft_filt[:n // 2])  # Magnitude only, half-spectrum
freqs = np.fft.fftfreq(n, T)[:n // 2]  # Frequency bins



# Plot positive frequencies only
plt.figure(figsize=(12, 4))
plt.plot(freqs, fft_filt, color='green')
#plt.plot(freqs, fft_vals,color='red')
plt.title("Frequency Response (FFT of ECG Signal)")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")
plt.xlim(0, 65)  # Zoom into 0 to 100 Hz


plt.grid(True)
plt.show()

from scipy.signal import butter
from scipy.signal import iirnotch, filtfilt
import matplotlib.pyplot as plt
for i in range(0,65000, 1000):
  signal, fields = wfdb.rdsamp('108', channels=[0], sampfrom=i, sampto=i+1000,pn_dir='mitdb')
  signal = signal.flatten()
  fs=fields['fs']
  time = np.arange(len(signal)) / fs
  filtered=signal_process(signal,fs)

print(i)
plt.figure(figsize=(12, 4))
plt.plot(time, filtered, color='blue')
plt.plot(time, signal, color='red')

plt.title('Channel 0 - Record 108 (MIT-BIH)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude (mV)')
plt.grid(True)
plt.tight_layout()
plt.show()


def signal_process (sig, fs,):
  low=0.5/(0.5*fs)
  high=40/(0.5*fs)
  b, a = butter(4, [low, high], btype='band', analog=False)
  filt = filtfilt(b, a, signal)  # Use filtfilt for zero-phase
  return filt



