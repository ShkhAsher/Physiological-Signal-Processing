{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red245\green245\blue245;\red0\green0\blue0;\red131\green0\blue165;
\red144\green1\blue18;\red15\green112\blue1;\red86\green65\blue25;\red19\green85\blue52;\red0\green0\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c96863\c96863\c96863;\cssrgb\c0\c0\c0;\cssrgb\c59216\c13725\c70588;
\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c50196\c0;\cssrgb\c41569\c32157\c12941;\cssrgb\c6667\c40000\c26667;\cssrgb\c0\c0\c100000;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \cb2 \expnd0\expndtw0\kerning0
pip install wfdb\cb1 \
\
\cf4 \cb2 import\cf0  numpy \cf4 as\cf0  np\cb1 \
\cf4 \cb2 import\cf0  wfdb\cb1 \
\
\cb2 record = wfdb.rdrecord(\cf5 '3141595_0001'\cf0 , pn_dir=\cf5 'mimic3wdb/1.0/31/3141595'\cf0 )\cb1 \
\
\cf6 \cb2 # Display the signal shape\cf0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb2 print\cf0 (record.p_signal.shape)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb2 # Plot the ECG\cf0 \cb1 \
\cb2 wfdb.plot_wfdb(record=record, title=\cf5 'MIMIC Record 3141595_0001'\cf0 )\cb1 \
\
\cb2 record.sig_name\cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb2 print\cf0 (record.p_signal.shape)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb2 # Demo 5 - Read a WFDB record and annotation.\cf0 \cb1 \
\cf6 \cb2 #signal, fields = wfdb.rdsamp('3141595_0001', sampfrom=0, sampto=1000, channels=[0], pn_dir='mimic3wdb/1.0/31/3141595')\cf0 \cb1 \
\cb2 signal, fields = wfdb.rdsamp(\cf5 '3141595_0001'\cf0 , sampfrom=\cf8 0\cf0 , sampto=\cf8 5000\cf0 , channels=[\cf8 0\cf0 ], pn_dir=\cf5 'mimic3wdb/1.0/31/3141595'\cf0 )\cb1 \
\
\cb2 signal = signal.flatten()\cb1 \
\
\
\cf4 \cb2 import\cf0  matplotlib.pyplot \cf4 as\cf0  plt\cb1 \
\
\cb2 plt.figure(figsize=(\cf8 12\cf0 , \cf8 5\cf0 ))\cb1 \
\cb2 plt.plot(signal, label=\cf5 'Original Signal'\cf0 )\cb1 \
\cb2 plt.tight_layout()\cb1 \
\cb2 plt.show()\cb1 \
\
\cb2 T = \cf8 1\cf0  / fs  \cf6 # Sampling interval\cf0 \cb1 \
\cb2 n = \cf7 len\cf0 (signal)\cb1 \
\cb2 fft_vals = np.fft.fft(signal)\cb1 \
\cb2 fft_vals = np.\cf7 abs\cf0 (fft_vals[:n // \cf8 2\cf0 ])  \cf6 # Magnitude only, half-spectrum\cf0 \cb1 \
\cb2 freqs = np.fft.fftfreq(n, T)[:n // \cf8 2\cf0 ]  \cf6 # Frequency bins\cf0 \cb1 \
\
\
\
\cf6 \cb2 # Plot positive frequencies only\cf0 \cb1 \
\cb2 plt.figure(figsize=(\cf8 12\cf0 , \cf8 4\cf0 ))\cb1 \
\cb2 plt.plot(freqs, fft_vals)\cb1 \
\cb2 plt.title(\cf5 "Frequency Response (FFT of PPG Signal)"\cf0 )\cb1 \
\cb2 plt.xlabel(\cf5 "Frequency (Hz)"\cf0 )\cb1 \
\cb2 plt.ylabel(\cf5 "Magnitude"\cf0 )\cb1 \
\cb2 plt.xlim(\cf8 0\cf0 ,\cf8 5\cf0 )\cb1 \
\cf6 \cb2 #plt.ylim(0,1300)\cf0 \cb1 \
\cb2 plt.grid(\cf9 True\cf0 )\cb1 \
\cb2 plt.show()\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb2 print\cf0 (signal.shape)\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 display(signal)\cb1 \
\cb2 display(fields)\cb1 \
\cb2 fs=fields[\cf5 'fs'\cf0 ]\cb1 \
\cb2 time = np.arange(\cf7 len\cf0 (signal)) / fs\cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb2 print\cf0 (fs)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb2 from\cf0  scipy.signal \cf4 import\cf0  butter\cb1 \
\cb2 low=\cf8 0.5\cf0 /(\cf8 0.5\cf0 *\cf8 125\cf0 )\cb1 \
\cb2 high=\cf8 5\cf0 /(\cf8 0.5\cf0 *\cf8 125\cf0 )\cb1 \
\cb2 b, a = butter(\cf8 4\cf0 , [low, high], btype=\cf5 'band'\cf0 , analog=\cf9 False\cf0 )\cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb2 print\cf0 (a)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb2 from\cf0  scipy.signal \cf4 import\cf0  iirnotch, filtfilt\cb1 \
\cb2 filtered = filtfilt(b, a, signal)  \cf6 # Use filtfilt for zero-phase\cf0 \cb1 \
\
\cb2 b, a = butter(\cf8 4\cf0 , Wn=\cf8 0.0064\cf0 , btype=\cf5 'high'\cf0 , analog=\cf9 False\cf0 )\cb1 \
\cb2 filtered = filtfilt(b, a, filtered)  \cf6 # Use filtfilt for zero-phase\cf0 \cb1 \
\
\cb2 fft_filt = np.fft.fft(filtered)\cb1 \
\cb2 fft_filt = np.\cf7 abs\cf0 (fft_filt[:n // \cf8 2\cf0 ])  \cf6 # Magnitude only, half-spectrum\cf0 \cb1 \
\cb2 freqs = np.fft.fftfreq(n, T)[:n // \cf8 2\cf0 ]  \cf6 # Frequency bins\cf0 \cb1 \
\
\
\
\cf6 \cb2 # Plot positive frequencies only\cf0 \cb1 \
\cb2 plt.figure(figsize=(\cf8 12\cf0 , \cf8 4\cf0 ))\cb1 \
\cb2 plt.plot(freqs, fft_filt, color=\cf5 'green'\cf0 )\cb1 \
\cf6 \cb2 #plt.plot(freqs, fft_vals,color='red')\cf0 \cb1 \
\cb2 plt.title(\cf5 "Frequency Response (FFT of PPG Signal)"\cf0 )\cb1 \
\cb2 plt.xlabel(\cf5 "Frequency (Hz)"\cf0 )\cb1 \
\cb2 plt.ylabel(\cf5 "Magnitude"\cf0 )\cb1 \
\cf6 \cb2 #plt.xlim(0, 65)  # Zoom into 0 to 100 Hz\cf0 \cb1 \
\
\
\cb2 plt.grid(\cf9 True\cf0 )\cb1 \
\cb2 plt.show()\cb1 \
\
\cf4 \cb2 import\cf0  matplotlib.pyplot \cf4 as\cf0  plt\cb1 \
\
\cb2 plt.figure(figsize=(\cf8 12\cf0 , \cf8 5\cf0 ))\cb1 \
\cb2 plt.plot(filtered, label=\cf5 'filtered Signal'\cf0 )\cb1 \
\cb2 plt.plot(signal, label=\cf5 'Original Signal'\cf0 )\cb1 \
\
\cb2 plt.tight_layout()\cb1 \
\cb2 plt.show()\cb1 \
\
\cb2 record = wfdb.rdrecord(\cf5 '108'\cf0 , pn_dir=\cf5 'mitdb'\cf0 , sampto=\cf8 1000\cf0 )\cb1 \
\cb2 sig = record.p_signal[:, \cf8 0\cf0 ]  \cf6 # First channel\cf0 \cb1 \
\
\cb2 display(sig)\cb1 \
\cb2 display(signal)\cb1 \
\
\cb2 plt.figure(figsize=(\cf8 12\cf0 , \cf8 4\cf0 ))\cb1 \
\cb2 plt.plot(time, sig, color=\cf5 'blue'\cf0 )\cb1 \
\cb2 plt.figure(figsize=(\cf8 12\cf0 , \cf8 4\cf0 ))\cb1 \
\cb2 plt.plot(time, signal, color=\cf5 'red'\cf0 )\cb1 \
\cb2 plt.title(\cf5 'Channel 0 - Record 100 (MIT-BIH)'\cf0 )\cb1 \
\cb2 plt.xlabel(\cf5 'Time (s)'\cf0 )\cb1 \
\cb2 plt.ylabel(\cf5 'Amplitude (mV)'\cf0 )\cb1 \
\cb2 plt.grid(\cf9 True\cf0 )\cb1 \
\cb2 plt.tight_layout()\cb1 \
\cb2 plt.show()\cb1 \
}